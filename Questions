            1)Класс Object
              Методы, что они делают.
В Java в вершине иерархии классов лежит класс java.lang.Object. Всего в Object 11 публичных методов, 5 обычных и 6 с нативной реализацией
        -По дефолту все объекты сравниваются на равенство ссылок.
public boolean equals(Object obj) {
    return (this == obj);
}

        -совпадение хэш-кодов у двух разных объектов называется коллизией. 
toString тоже не содержит ничего необычного, кроме разве того, что hashCode() преобразуется в шестнадцатеричную строку
public String toString() {
    return getClass().getName() + "@" + Integer.toHexString(hashCode());
}


        -wait относится к примитивам обеспечивающим многопоточность
public final void wait(long timeout, int nanos) throws InterruptedException {
    if (timeout < 0) {
        throw new IllegalArgumentException("timeout value is negative");
    }

    if (nanos < 0 || nanos > 999999) {
        throw new IllegalArgumentException(
                            "nanosecond timeout value out of range");
    }

    if (nanos >= 500000 || (nanos != 0 && timeout == 0)) {
        timeout++;
    }

    wait(timeout);
}

public final void wait() throws InterruptedException {
    wait(0);
}



    -Предназначен этот метод для автоматического освобождения системных ресурсов, занимаемых объектом, на котором будет данный метод вызван.
        protected void finalize() throws Throwable { }




            2)Методы класса Object equals() и hashCode()
Реализация по умолчанию hashCode() возвращает значение, которое называется идентификационный хеш (identity hash code)

      Контракт equals() в Java:
Используя equals, мы должны придерживаться основных правил, определённых в спецификации Java:

-Рефлексивность — x.equals(x) возвращает true.
-Симметричность — x.equals(y) <=> y.equals(x).
-Транзитивность — x.equals(y) <=> y.equals(z) <=> x.equals(z).
-Согласованность — повторный вызов x.equals(y) должен возвращать значение предыдущего вызова, если сравниваемые поля не изменялись.
-Сравнение null — x.equals(null) возвращает false.

В случае Java, метод hashCode() возвращает для любого объекта 32-битное число типа int. Сравнить два числа между собой гораздо быстрее, чем сравнить два объекта методом equals(), особенно если в нём используется
много полей.

    Контракт hashCode() в Java:
-Повторный вызов hashCode для одного и того же объекта должен возвращать одинаковые хеш-значения, если поля объекта, участвующие в вычислении значения, не менялись.
-Если equals() для двух объектов возвращает true, hashCode() также должен возвращать для них одно и то же число.
-При этом неравные между собой объекты могут иметь одинаковый hashCode.














        5) == vs equals() Что сравнивается?
Оператор == сравнивает ссылки на объекты, тогда как метод equals() сравнивает значения объектов



        6)  Интерфейсы vs Абстрактный класс

Интерфейс описывает только поведение. У него нет состояния. А у абстрактного класса состояние есть: он описывает и то, и другое. Интерфейсы могут содержать методы и константы, но не могут содержать обычные 
переменные экземпляра или конструкторы.
Модификаторы по умолчанию для полей и методов в интерфейсах - это public и abstract, соответственно. Это означает, что все поля и методы в интерфейсе являются открытыми и абстрактными (т.е. не имеют реализации).
Интерфейсы могут содержать методы с реализацией по умолчанию (default methods) и статические методы (static methods). Методы с реализацией по умолчанию позволяют добавлять
новую функциональность в существующий интерфейс без необходимости изменения реализации классов, которые уже реализуют данный интерфейс. Статические методы могут использоваться для предоставления вспомогательной
функциональности или констант внутри интерфейса.








         8)Методы в интерфейсах, Какой модификатор доступа, Default методы
-методы по умолчанию, все методы и переменные неявно объявляются в интерфейсе как public
-static  
private




















