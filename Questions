            1)Класс Object
              Методы, что они делают.
В Java в вершине иерархии классов лежит класс java.lang.Object. Всего в Object 11 публичных методов, 5 обычных и 6 с нативной реализацией


        ____Пара методов, которые используются для сравнения объектов.
public native int hashCode()

public boolean equals(Object obj) {
    return (this == obj);
}

        -совпадение хэш-кодов у двух разных объектов называется коллизией. 

   _____Возвращает строковое представление объекта, hashCode() преобразуется в шестнадцатеричную строку, 
public String toString() {
    return getClass().getName() + "@" + Integer.toHexString(hashCode());
}


        ___wait относится к примитивам обеспечивающим многопоточность
public final void wait(long timeout, int nanos) throws InterruptedException {
    if (timeout < 0) {
        throw new IllegalArgumentException("timeout value is negative");
    }

    if (nanos < 0 || nanos > 999999) {
        throw new IllegalArgumentException(
                            "nanosecond timeout value out of range");
    }

    if (nanos >= 500000 || (nanos != 0 && timeout == 0)) {
        timeout++;
    }

    wait(timeout);
}
public final void wait() throws InterruptedException {
    wait(0);
}




    ____Предназначен этот метод для автоматического освобождения системных ресурсов, занимаемых объектом, на котором будет данный метод вызван, Метод позволяет «освободить»
родные не-Java ресурсы: закрыть файлы, потоки и т.д.
        protected void finalize() throws Throwable { }

    _____Возвращает специальный объект, который описывает текущий класс.
public final native Class getClass()

    _____Методы для контроля доступа к объекту из различных нитей. Управление синхронизацией нитей.
public final native void notify()
public final native void notifyAll()
public final native void wait(long timeout)
public final void wait(long timeout, intnanos)
public final void wait()

    ____Метод позволяет клонировать объект: создает дубликат объекта.
protected native Object clone()




            2)Методы класса Object equals() и hashCode()
Реализация по умолчанию hashCode() возвращает значение, которое называется идентификационный хеш (identity hash code)

Контракт hashCode() в Java:
-Повторный вызов hashCode для одного и того же объекта должен возвращать одинаковые хеш-значения, если поля объекта, участвующие в вычислении значения, не менялись.
-Если equals() для двух объектов возвращает true, hashCode() также должен возвращать для них одно и то же число.
-При этом неравные между собой объекты могут иметь одинаковый hashCode. - коллизия

      Контракт equals() в Java:
Используя equals, мы должны придерживаться основных правил, определённых в спецификации Java:

-Рефлексивность — x.equals(x) возвращает true.
-Симметричность — x.equals(y) <=> y.equals(x).
-Транзитивность — x.equals(y) <=> y.equals(z) <=> x.equals(z).
-Согласованность — повторный вызов x.equals(y) должен возвращать значение предыдущего вызова, если сравниваемые поля не изменялись.
-Сравнение null — x.equals(null) возвращает false.

В случае Java, метод hashCode() возвращает для любого объекта 32-битное число типа int. Сравнить два числа между собой гораздо быстрее, чем сравнить два объекта методом equals(), особенно если в нём используется
много полей.














        5) == vs equals() Что сравнивается?
Оператор == сравнивает ссылки на объекты, тогда как метод equals() сравнивает значения объектов



        6)  Интерфейсы vs Абстрактный класс
 Главное различие между абстрактным классом и интерфейсом заключается в том, что абстрактный класс может иметь состояние, тогда как интерфейс нет. Отсюда вытекает тот факт, что абстрактный класс может иметь
конструктор, тогда как интерфейс нет. 
От абстрактного класса нельзя создавать new() обекты. Абстрактного класс - концепция, если другой класс наследуется от него, то эти классы могут считаться сущностями и можно создавать их обьекты. Создание 
иерархии. В абстрактного классе как и в интерфесе можно создать метод без реализации


        7) Переменные в интерфейсах, какие модификаторы ставятся по умолчанию.
      Переменные интерфейса являются public static final по умолчанию и эти модификаторы необязательны при их объявлении




         8)Методы в интерфейсах, Какой модификатор доступа, Default методы
Все методы интерфейса являются public abstract и эти модификаторы необязательны. Мы должны их реализовать  последующих классах implements
В JDK 8 в интерфейсы ввели методы по умолчанию - это методы, у которых есть реализация. Другое их название - методы расширения default, их можно не переобределять в последующих классах implements




         9)Ключевое слово static
Член класса, который будет исполь.зоваться независимо от любого объекта этого класса. Когда член класса объявлен как static (статический), он доступен до создания любых объектов его класса и без ссылки на
какой-нибудь объект. Статическими могут быть объявлены как методы, так и переменные. Наиболее распространенным примером статического члена служит метод main ( ) , который объявляется как static, поскольку
он должен быть объявлен до создания любых объектов. Переменные экземпляра, объявленные как static, по существу, являются глобальными. При объявлении объектов класса этих переменных их копии не создаются. 
Вместо этого все экземпляры класса совместно используют одну и ту же статическую переменную.
На методы, объявленные как static, накладывается следующие ограничения:
• Они могут непосредственно вызывать только другие статические методы.
• Им непосредственно доступны только статические переменные.
• Они никоим образом не могут делать ссылки типа this или  super. 



       10)Ключевое слово final
-Переманная - константа
-Метод - нельзя переопределить
-Класс - нельзя наследоваться 

       11)Примитивные типы данных, что это такое, сколько их, размеры каждого
 -целые числа (byte, short, int, long);
-числа с плавающей точкой (float, double);
-логический (boolean);
-символьный (char).
Нужны для хранения значений
byte = 8 бит, +-2^7
short = 16 бит, +-2^15
int = 32 бит, +-2^31
long = 64 бит, +-2^63
float = 32 бит
double = 64 бит
char = 16 бит
boolean





